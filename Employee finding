import spacy

# 加载英文模型
nlp = spacy.load("en_core_web_sm")

# 员工相关词汇
employee_terms = {"employee", "employees", "staff", "personnel", "headcount", "workforce"}

def find_employee_numbers(text):
    doc = nlp(text)
    results = []

    for i, token in enumerate(doc):
        # 找到关键词
        if token.lemma_.lower() in employee_terms:
            # 搜索附近5个词以内的数字
            for j in range(max(0, i-5), min(len(doc), i+6)):
                if doc[j].like_num:
                    try:
                        number = int(doc[j].text.replace(",", ""))
                        results.append({
                            "term": token.text,
                            "number": number,
                            "context": doc[max(0, j-3):min(len(doc), j+4)].text
                        })
                    except ValueError:
                        continue
    return results

# 示例文本
text = """
We currently employ 120 full-time staff and 30 part-time employees.
Our total workforce is about 150. The company had 98 employees in 2020.
Only 5 people manage the HR department.
"""

employee_data = find_employee_numbers(text)
for item in employee_data:
    print(item)



######
import spacy

# 加载spaCy模型
nlp = spacy.load("en_core_web_sm")

# 员工相关词汇（你可以继续扩展）
employee_terms = {"employee", "employees", "staff", "personnel", "headcount", "workforce"}

def find_employee_numbers(text, max_distance=10):
    doc = nlp(text)
    results = []

    # 找出所有数字和员工相关词的位置
    number_indices = [(i, token) for i, token in enumerate(doc) if token.like_num]
    employee_indices = [(i, token) for i, token in enumerate(doc) if token.lemma_.lower() in employee_terms]

    # 遍历两者组合，判断距离
    for num_idx, num_token in number_indices:
        for emp_idx, emp_token in employee_indices:
            if abs(num_idx - emp_idx) <= max_distance:
                try:
                    number = int(num_token.text.replace(",", ""))
                    context_window = doc[max(0, min(num_idx, emp_idx)-3): max(num_idx, emp_idx)+4]
                    results.append({
                        "term": emp_token.text,
                        "number": number,
                        "context": context_window.text
                    })
                except ValueError:
                    continue
    return results

# 示例文本
text = """
We currently employ 120 full-time staff and 30 part-time employees.
In 2020, the total number of employees working in the company was 98.
The workforce is projected to grow to 150 next year.
Only 5 people are in HR.
"""

# 调用函数
employee_data = find_employee_numbers(text)
for item in employee_data:
    print(item)


####### verison 3

import spacy
import pandas as pd

nlp = spacy.load("en_core_web_sm")

# 员工相关词汇
employee_nouns = {
    "employee", "employees", "staff", "personnel", "headcount", "workforce",
    "individuals", "interns", "people", "workers", "crew", "team"
}
employee_verbs = {"employ", "employs", "hire", "hires", "retain", "retains", "recruit", "recruits", "staff"}

# 部门或地点关键词（可扩展）
location_department_keywords = [
    "hr", "finance", "headquarters", "office", "plant", "site", "facility",
    "lab", "laboratory", "warehouse", "store", "division", "factory", "center",
    "department", "manufacturing", "production"
]

def find_employee_numbers_with_location(text_list, max_distance=10):
    results = []

    for text in text_list:
        doc = nlp(text)
        for i, token in enumerate(doc):
            if not token.like_num:
                continue
            try:
                number = int(token.text.replace(",", ""))
            except ValueError:
                continue

            start = max(0, i - max_distance)
            end = min(len(doc), i + max_distance + 1)
            context_tokens = doc[start:end]
            context_text = context_tokens.text.lower()

            emp_term = None
            pos_type = None

            # 查找员工名词
            for j in range(start, end):
                if doc[j].lemma_.lower() in employee_nouns:
                    emp_term = doc[j].text
                    pos_type = "noun"
                    break
            else:
                # 查找员工动词
                for j in range(start, end):
                    if doc[j].lemma_.lower() in employee_verbs:
                        emp_term = doc[j].text
                        pos_type = "verb"
                        break

            if emp_term:
                # 提取部门或地点信息
                matched_loc = None
                for kw in location_department_keywords:
                    if kw in context_text:
                        matched_loc = kw
                        break

                results.append({
                    "Employee Term": emp_term,
                    "POS Type": pos_type,
                    "Number": number,
                    "Location or Department": matched_loc or "Unspecified",
                    "Context": context_tokens.text,
                    "Sentence": doc.text
                })

    return pd.DataFrame(results)

# 示例输入
sentences = [
    "We employ 23 full-time staff.",
    "2 people are currently retained in the HR department.",
    "The firm employs 1,713 individuals at the manufacturing site.",
    "They hired 5 workers in the lab.",
    "The company recruited 8 personnel for the finance division.",
    "Only 3 people are based in headquarters."
]

df = find_employee_numbers_with_location(sentences)
import ace_tools as tools; tools.display_dataframe_to_user(name="Employee Numbers with Location or Department", dataframe=df)


#####version 3

import spacy
import pandas as pd
import re
from word2number import w2n

nlp = spacy.load("en_core_web_sm")

employee_nouns = {
    "employee", "employees", "staff", "personnel", "headcount", "workforce",
    "individuals", "interns", "people", "workers", "crew", "team"
}

# 添加更多“拥有员工”的动词
employee_verbs = {
    "employ", "employs", "hire", "hires", "retain", "retains",
    "recruit", "recruits", "staff", "has", "have", "includes"
}

location_department_keywords = [
    "hr", "finance", "headquarters", "office", "plant", "site", "facility",
    "lab", "laboratory", "warehouse", "store", "division", "factory", "center",
    "department", "manufacturing", "production", "team"
]

prefix_number_pattern = re.compile(r'^(\d+)[a-zA-Z]')
numeric_word_pattern = re.compile(r'\b(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty)\b', re.IGNORECASE)

def normalize_text(text):
    try:
        return str(w2n.word_to_num(text))
    except:
        return text

def find_employee_numbers_final(text_list, max_distance=10):
    results = []

    for text in text_list:
        doc = nlp(text)

        # 使用正则提前修正合并词（如 3ofwhich）分词问题
        text_fixed = re.sub(r'(\d+)([a-zA-Z])', r'\1 \2', text)

        doc = nlp(text_fixed)

        for i, token in enumerate(doc):
            lemma = token.lemma_.lower()
            if lemma not in employee_nouns and lemma not in employee_verbs:
                continue

            emp_term = token.text
            pos_type = "noun" if lemma in employee_nouns else "verb"

            # 双向搜索数字
            number = None
            context_tokens = None

            for j in range(max(0, i - max_distance), min(len(doc), i + max_distance + 1)):
                neighbor = doc[j]
                val = normalize_text(neighbor.text.lower())
                if val.isdigit():
                    number = int(val)
                    context_tokens = doc[min(i, j):max(i, j)+1]
                    break
                elif prefix_number_pattern.match(neighbor.text):
                    number = int(prefix_number_pattern.match(neighbor.text).group(1))
                    context_tokens = doc[min(i, j):max(i, j)+1]
                    break
                elif numeric_word_pattern.match(neighbor.text.lower()):
                    try:
                        val_num = w2n.word_to_num(neighbor.text.lower())
                        number = int(val_num)
                        context_tokens = doc[min(i, j):max(i, j)+1]
                        break
                    except:
                        continue

            if number is not None:
                context_text = context_tokens.text.lower() if context_tokens else ""
                loc_entities = [ent.text for ent in doc.ents 
                                if ent.start >= context_tokens.start and ent.end <= context_tokens.end and ent.label_ in {"ORG", "GPE", "FAC"}] if context_tokens else []
                matched_kw = next((kw for kw in location_department_keywords if kw in context_text), None)
                loc_dep = loc_entities[0] if loc_entities else (matched_kw if matched_kw else "Unspecified")

                results.append({
                    "Employee Term": emp_term,
                    "POS Type": pos_type,
                    "Number": number,
                    "Location or Department": loc_dep,
                    "Context": context_tokens.text if context_tokens else "",
                    "Sentence": doc.text
                })

    return pd.DataFrame(results)
