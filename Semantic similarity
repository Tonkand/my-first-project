import spacy
import pandas as pd

# 加载大型模型支持短语相似度
nlp = spacy.load("en_core_web_lg")

# 设备列表（可以换成你自己的清单）
equipment_list = ["fluid bed dryer", "centrifuge", "microscope", "syringe", "high-speed mixer"]
equipment_docs = [nlp(eq) for eq in equipment_list]

# 模拟文章列表
documents = [
    "The fluidized drying system is efficient for particle processing.",
    "Our lab uses a high-resolution microscope and a manual syringe.",
    "They purchased a centrifugal machine instead of a centrifuge.",
    "This device is unrelated to any listed equipment.",
]

SIMILARITY_THRESHOLD = 0.75
results = []

# 主循环：每篇文章处理
for idx, text in enumerate(documents):
    doc = nlp(text)
    matches = []

    # 遍历每个设备，比较它与文本中任意连续词组合的相似度
    for eq_doc, eq_name in zip(equipment_docs, equipment_list):
        best_phrase = ""
        best_score = 0.0

        # 尝试在文本中找出 1 到 4 词长的组合（短语）
        for i in range(len(doc)):
            for j in range(i + 1, min(i + 5, len(doc) + 1)):
                span = doc[i:j]
                # 过滤空格或标点
                if not span.text.strip() or any(t.is_punct for t in span): 
                    continue

                sim = span.similarity(eq_doc)
                if sim > best_score and sim >= SIMILARITY_THRESHOLD:
                    best_score = sim
                    best_phrase = span.text

        if best_phrase:
            matches.append({
                "equipment": eq_name,
                "matched_phrase": best_phrase,
                "similarity": round(best_score, 3)
            })

    results.append({
        "doc_id": idx,
        "text": text,
        "matches": matches
    })

# 展平结果
flattened = []
for r in results:
    for match in r["matches"]:
        flattened.append({
            "doc_id": r["doc_id"],
            "text": r["text"],
            "equipment": match["equipment"],
            "matched_phrase": match["matched_phrase"],
            "similarity": match["similarity"]
        })

df = pd.DataFrame(flattened)
from ace_tools import display_dataframe_to_user
display_dataframe_to_user(name="Matched Equipment Phrases", dataframe=df)
