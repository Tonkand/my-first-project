{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import spacy\
import re\
\
# Load spaCy model\
nlp = spacy.load("en_core_web_sm")\
\
# Input text\
text = """\
This site gained control over the market and expanded in 1980.\
This firm gained control of the industry in 1990, and by 2000 it was dominating.\
In 2020, this site was gaining control rapidly, and the company saw growth in 2021.\
They gained control of the market in 2015, but faced challenges in 2020.\
This firm gains control every year, and in 2025, it plans to expand further.\
Microsoft gained control in 1995 and continued to grow.\
Apple gained control of the market in 2001, and by 2005, it was a leader.\
Control was gained by the firm in 1995, but it was not the same as gaining control.\
This firm purchased the property in 2010 and sold it in 2015.\
The company procured the assets in 2018, and in 2021, it made further acquisitions.\
Control was procured by the firm in 1997, and they were able to grow rapidly in 2000.\
In 2025, this site will purchase new assets and expand in 2026.\
The company acquired a new firm in 2022.\
The firm had acquired many companies by 2023.\
In 2024, this site was acquiring new businesses at a fast rate.\
This firm bought out its competitors in 2015.\
In 2025, Microsoft plans to buy new assets.\
In 2023, they were buying out smaller firms.\
This firm took over the market in 2010.\
In 2022, Apple merged with another company.\
"""\
\
# Define target verbs and phrasal verbs\
target_verbs = ["gain", "purchase", "procure", "acquire", "buy", "merge", "take"]\
phrasal_verbs = [\
    ("buy", "out"),\
    ("take", "over"),\
    ("gain", "control")\
]\
key_phrases = ["this site", "this firm"]\
\
# Regex for matching years\
year_pattern = re.compile(r"\\b(19[0-9]\{2\}|20[0-9]\{2\})\\b")\
\
# Function to identify relevant sentences\
def contains_key_entity_or_org(sent):\
    lowered = sent.text.lower()\
    if any(phrase in lowered for phrase in key_phrases):\
        return True\
    if "the company" in lowered or "they" in lowered or "the firm" in lowered:\
        return True\
    for ent in sent.ents:\
        if ent.label_ == "ORG":\
            return True\
    return False\
\
# Process the text\
doc = nlp(text)\
results = []\
seen = set()\
\
for sent in doc.sents:\
    if not contains_key_entity_or_org(sent):\
        continue\
\
    years = re.findall(year_pattern, sent.text)\
    if not years:\
        continue\
\
    tokens = list(sent)\
    for i, token in enumerate(tokens):\
        verb = None\
        verb_voice = "active"\
\
        # Single-word verb detection\
        if token.lemma_ in target_verbs and token.pos_ == "VERB":\
            verb = token.lemma_\
\
        # Phrasal verb detection\
        for v_root, v_particle in phrasal_verbs:\
            if token.lemma_ == v_root and token.pos_ == "VERB":\
                if i + 1 < len(tokens):\
                    next_token = tokens[i + 1]\
                    if next_token.lower_ == v_particle:\
                        verb = f"\{v_root\} \{v_particle\}"\
                        break\
\
        if verb:\
            # Voice detection\
            if token.dep_ in ["auxpass", "nsubjpass"] or token.tag_ == "VBN":\
                verb_voice = "passive"\
            elif token.tag_ == "VBG":\
                verb_voice = "progressive"\
\
            verb_position = token.idx\
            closest_year = min(years, key=lambda y: abs(sent.text.find(y) - verb_position))\
            key = (sent.text, verb, closest_year)\
            if key not in seen:\
                results.append(\{\
                    "verb": verb,\
                    "voice": verb_voice,\
                    "year": closest_year,\
                    "sentence": sent.text.strip()\
                \})\
                seen.add(key)\
\
# Output results\
for r in results:\
    print(f"Voice: \{r['voice']\} | Verb: \{r['verb']\} | Year: \{r['year']\} | Sentence: \{r['sentence']\}")}