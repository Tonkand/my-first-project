import pandas as pd
from rapidfuzz import process, fuzz

# 需要匹配的 DataFrame A
df_a = pd.DataFrame({
    'input_name': ['aspirin', 'ibuprofane', 'paracitamol', 'amoxilin']
})

# 匹配来源的 DataFrame B
df_b = pd.DataFrame({
    'match_column': ['aspirin', 'ibuprofen', 'paracetamol', 'amoxicillin', 'acetaminophen'],
    'info_column': ['used for pain', 'NSAID', 'fever reducer', 'antibiotic', 'pain relief']
})
# 定义 fuzzy match 函数，返回 match_column 和 info_column
def fuzzy_match_with_info(text, df_lookup):
    match, score, idx = process.extractOne(text, df_lookup['match_column'], scorer=fuzz.ratio)
    matched_info = df_lookup.iloc[idx]['info_column']
    return pd.Series([match, matched_info, score])

# 应用函数
df_a[['best_match', 'match_info', 'match_score']] = df_a['input_name'].apply(
    lambda x: fuzzy_match_with_info(x, df_b)
)

print(df_a)

########from thefuzz import process
import pandas as pd
import re

# 示例数据
df = pd.DataFrame({
    'cleaned_name': ['methyl moxazolidinyl', 'amoxillin clavunlate']
})

# 词典（你提供的）
valid_words_list = ['methyl', 'moxazolidinyl', 'amoxicillin', 'clavulanate']

# 分词 + 检查 + fuzzy match
def check_and_correct(text, dictionary):
    words = re.findall(r'\b[a-zA-Z]{2,}\b', text)
    unmatched, matched, scores = [], [], []
    
    for word in words:
        if word.lower() not in dictionary:
            best_match, score = process.extractOne(word, dictionary)
            unmatched.append(word)
            matched.append(best_match)
            scores.append(score)
    
    return pd.Series([unmatched, matched, scores])

# 应用到 DataFrame
df[['unmatched_words', 'matched_words', 'match_scores']] = df['cleaned_name'].apply(
    lambda x: check_and_correct(x, valid_words_list)
)

print(df)
